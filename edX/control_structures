Scope: The portion of a programâ€™s execution during which a variable can be seen and accessed. "The computer remembers it".

In python: the inside of a conditional can see variables defined before it, but the code that runs after the conditional 
cannot see any variables that are created inside the condition.

Scope in Python is actually a little bit more straightforward to understand than in many languages, 
but it also carries its own challenges. 
Generally, every variable or function we create has a line on which it is created. 
If that line has already run, then the scope for that variable or function has begun.
If it hasn't, then that variable's or function's scope has not yet begun.

Note that a variable's scope begins with the line on which it's created, but that means it cannot be used until the next line. 
For example, we could not run this line of code unless a_num had already been created:
a_num = a_num + 1
Typically we describe the scope of a variable as starting on the line on which it's created, 
but be careful that you're not trying to create and use the variable on the same line: 
its scope doesn't start until the line has finished running.

Use [in] to check if something is in a list or not
jacketWeather = []
todayWeather = 
if todayWeather in jacketWeather:

