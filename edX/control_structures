Scope: The portion of a program’s execution during which a variable can be seen and accessed. "The computer remembers it".

In python: the inside of a conditional can see variables defined before it, but the code that runs after the conditional 
cannot see any variables that are created inside the condition.

Scope in Python is actually a little bit more straightforward to understand than in many languages, 
but it also carries its own challenges. 
Generally, every variable or function we create has a line on which it is created. 
If that line has already run, then the scope for that variable or function has begun.
If it hasn't, then that variable's or function's scope has not yet begun.

Note that a variable's scope begins with the line on which it's created, but that means it cannot be used until the next line. 
For example, we could not run this line of code unless a_num had already been created:
a_num = a_num + 1
Typically we describe the scope of a variable as starting on the line on which it's created, 
but be careful that you're not trying to create and use the variable on the same line: 
its scope doesn't start until the line has finished running.

Use [in] to check if something is in a list or not
jacketWeather = []
todayWeather = 
if todayWeather in jacketWeather:

Boolean Functions:
>>>myName = 'Jenny'
>>>if myName.isDigit():
(isDigit() is a boolean function)

Boolean operators: and, or, not

1| for i in range(1, 6):
2|     j = 0
3|     while j < i:
4|         print(j, end = " ")
5|         j += 1
5|     print("")
Note: [end = " "] means that print() will put a space after what was printed instead of starting a new line. 
      [sep =] gives separations to elements in a print statement.

continue, pass, and break:
  continue: end current iteration and move to next iteration.
  break: end of loop, move out of the loop.
  pass: a place holder; Break the requirement that control structures must have code within them 
      and skip the body of the control structure.
        class MyClass(object):
        def meth_a(self):
            pass
        def meth_b(self):
            print "I'm meth_b"
            
FUNCTIONS
Function Definition: A segment of code that creates a function, including its name, parameters, and code, 
  to be used by other portions of a program.

Parameter: A variable for which a function expects to receive a value when called,
  whose scope is the function’s own execution.

Function Header: The name and list of parameters a function expects, 
  provided as reference to the rest of the program to use when calling the function.

Function Body: The code that a function runs when called.

Arguments: Values passed into parameters during a function call.

Return Statement: The line of code that defines what output will be sent back at the end of a function.

Keyword Parameters: A special kind of optional parameter to which the program may choose to assign an argument during a function call, 
  or may ignore. Typically, keyword parameters have a default value that is used if it is not overridden by a function call.
  Keyword parameters must go after all positional parameters. Positional parameters are called "positional" specifically 
  because Python assumes the match-up between argument and parameter based on position.
  Define keyword parameters in function declaration. The values of keyword parameters can be changed inside the function or 
    upon calling.
  eg: print("A", "B", "C", sep = "", end = "")
      print("D", "E", "F", sep = "", end = "")
      >>>ABCDEF
